{"version":3,"sources":["Factories.js","Events.js","components/LoginForm.jsx","components/UsersList.jsx","components/MessagesList.jsx","components/NewMessageForm.jsx","components/ChatLayout.jsx","components/MainLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["uuidv4","require","module","exports","createMessage","message","arguments","length","undefined","sender","id","datetime","Date","now","toLocaleString","day","month","year","hour","minute","createChat","messages","users","title","typingUsers","createUser","nickname","socketId","PUBLIC_CHAT","USER_CONNECTED","MESSAGE_RECEIVED","MESSAGE_SENT","USER_DISCONNECTED","VERIFY_USER","PRIVATE_MESSAGE","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","handleChange","bind","assertThisInitialized","handleSubmit","verifyUserCallback","_this2","react","className","onSubmit","htmlFor","type","ref","input","textInput","value","onChange","placeholder","disabled","e","preventDefault","socket","emit","handleError","setState","target","user","nicknameExists","connectUser","React","UsersList","map","key","onClick","privateMessage","chats","chat","lastMessage","username","find","classNames","active","concat","setActive","MessagesList","messageReceived","refs","container","scrollTop","scrollHeight","index","renderMessage","text","NewMessageForm","sendMessage","ChatLayout","addChat","usersChanged","sendPrivateMessage","on","Event","filter","array1","array2","every","x","includes","_this3","toCompare","toOpen","ch","sameElements","UsersList_UsersList","MessagesList_MessagesList","name","NewMessageForm_NewMessageForm","chatId","messageItem","_this4","newChats","toConsumableArray","eventName","push","MainLayout","initConnection","disconnectUser","react_default","a","createElement","ChatLayout_ChatLayout","LoginForm_LoginForm","io","Component","App","MainLayout_MainLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAA,IAAMA,EAASC,EAAQ,IAmDvBC,EAAOC,QAAU,CACbC,cA/BkB,eAACC,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAW,GAAIG,EAAfH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAwB,GAAxB,MAClB,CACII,GAAIV,IACJS,OAAQA,EACRJ,QAASA,EACTM,SAAU,IAAIC,KAAKA,KAAKC,OAAOC,oBAAeN,EAAW,CAACO,IAAK,UAC3DC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,cAuBhBC,WAZe,eAACC,EAADf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAY,GAAIgB,EAAhBhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAwB,GAAIiB,EAA5BjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,SAApC,MACf,CACII,GAAIV,IACJuB,MAAOA,EACPD,MAAOA,EACPD,SAAUA,EACVG,YAAa,KAOjBC,WA/Ce,SAACC,EAAUC,GAAX,MACf,CACID,SAAUA,EACVC,SAAUA,kGCVlBzB,EAAOC,QAAU,CACbyB,YAAY,cACZC,eAAe,iBACfC,iBAAiB,mBACjBC,aAAa,eACbC,kBAAkB,oBAClBC,YAAY,cACZC,gBAAgB,mLCJCC,cAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTlB,SAAU,GACVmB,MAAO,IAGXR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKa,mBAAqBb,EAAKa,mBAAmBH,KAAxBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAVXA,wEAaV,IAAAc,EAAAX,KACL,OACIY,EAAA,qBAAKC,UAAU,SACXD,EAAA,sBAAMC,UAAU,aAAaC,SAAUd,KAAKS,cACxCG,EAAA,uBAAOG,QAAQ,YACXH,EAAA,yDAEJA,EAAA,uBAAOI,KAAK,OAAOC,IAAK,SAACC,GAAD,OAAWP,EAAKQ,UAAYD,GAAOhD,GAAG,WAAWkD,MAAOpB,KAAKI,MAAMlB,SAAUmC,SAAUrB,KAAKM,aAAcgB,YAAY,wCAC9IV,EAAA,wBAAQW,SAAUvB,KAAKI,MAAMlB,SAASnB,OAAS,EAAG8C,UAAU,OAAOG,KAAK,UAAxE,UACAJ,EAAA,qBAAKC,UAAU,SAAUb,KAAKI,MAAMC,8CAMvCmB,GACTA,EAAEC,iBACEzB,KAAKI,MAAMlB,SACXc,KAAKJ,MAAM8B,OAAOC,KAAKlC,cAAaO,KAAKI,MAAMlB,SAAUc,KAAKU,oBAG9DV,KAAK4B,YAAY,oEAIZJ,GACTxB,KAAK6B,SAAS,CAAE3C,SAAWsC,EAAEM,OAAOV,4CAG5Bf,GACRL,KAAK6B,SAAS,CAACxB,MAAOA,+CAGP0B,EAAMC,GACjBA,EACAhC,KAAK4B,YAAY,oCAGjB5B,KAAK4B,YAAY,MACjB5B,KAAKJ,MAAMqC,YAAYF,WAtDIG,qBCAlBC,cAEjB,SAAAA,EAAYvC,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GAAArC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KACVJ,0EAGD,IAAAC,EAAAG,KACL,OACIY,EAAA,qBAAK1C,GAAG,YACJ0C,EAAA,qBAAKC,UAAU,WACfD,EAAA,0CAEAA,EAAA,qBAAKC,UAAU,SAEHb,KAAKJ,MAAMd,MAAMsD,IAAI,SAACL,GAClB,OACInB,EAAA,qBAAKC,UAAU,QAAQwB,IAAKN,EAAK7C,SAAUoD,QAAS,kBAAMzC,EAAKD,MAAM2C,eAAeR,EAAK7C,YAAzF,KACO6C,EAAK7C,aAOhC0B,EAAA,qBAAKC,UAAU,WACfD,EAAA,mCAEAA,EAAA,qBAAKC,UAAU,SAEHb,KAAKJ,MAAM4C,MAAMJ,IAAI,SAACK,GAClB,GAAIA,EAAK1D,MAAO,CACZ,IAAM2D,EAAcD,EAAK5D,SAAS4D,EAAK5D,SAASd,OAAS,GACnD4E,EAAWF,EAAK3D,MAAM8D,KAAK,SAACb,GAAU,OAAOA,IAASlC,EAAKD,MAAMmC,KAAK7C,YAAc,SACpF2D,EAAchD,EAAKD,MAAMkD,QAAUjD,EAAKD,MAAMkD,OAAO5E,KAAOuE,EAAKvE,GAAM,SAAW,GACxF,OACI0C,EAAA,qBAAKyB,IAAKI,EAAKvE,GAAI2C,UAAS,QAAAkC,OAAUF,GAAcP,QAAS,WAAOzC,EAAKD,MAAMoD,UAAUP,KACrF7B,EAAA,qBAAKC,UAAU,aACXD,EAAA,qBAAKC,UAAU,QAAQ8B,GACtBD,GAAe9B,EAAA,qBAAKC,UAAU,gBAAgB6B,EAAY7E,WAK3E,OAAO,gBA3CAqE,aCDlBe,cAEjB,SAAAA,EAAYrD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,IACdpD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmD,GAAA9C,KAAAH,KAAMJ,KAEDsD,gBAAkBrD,EAAKqD,gBAAgB3C,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHTA,iFAOdG,KAAKmD,KAAKC,UAAUC,UAAYrD,KAAKmD,KAAKC,UAAUE,yDAIpDtD,KAAKkD,+DAILlD,KAAKkD,mDAGA,IAAAvC,EAAAX,KACL,OACIY,EAAA,qBAAKC,UAAU,mBAAmBI,IAAI,aAE9BL,EAAA,qBAAKC,UAAU,UAEPb,KAAKJ,MAAMf,SAASuD,IAAI,SAACvE,EAAS0F,GAAV,OAAoB5C,EAAK6C,cAAc3F,6CASzEA,GAEuBA,EAA1BI,OAA0BJ,EAAlB4F,KAFI,IAEEtF,EAAYN,EAAZM,SAErB,OACYyC,EAAA,qBAAKyB,IAAKxE,EAAQK,GACb2C,UAAW,sBAAwBhD,EAAQI,SAAW+B,KAAKJ,MAAMmC,KAAK7C,UAAY,UACnF0B,EAAA,qBAAKC,UAAU,QACXD,EAAA,qBAAKC,UAAU,WAAWhD,EAAQA,SAClC+C,EAAA,qBAAKC,UAAU,QAAQhD,EAAQI,QAC/B2C,EAAA,qBAAKC,UAAU,QAAQ1C,YA7CT+D,aCDrBwB,cAEjB,SAAAA,EAAY9D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IACf7D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTvC,QAAS,IAGbgC,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARLA,4EAWN2B,GACTA,EAAEC,iBACFzB,KAAKJ,MAAM+D,YAAY3D,KAAKI,MAAMvC,SAClCmC,KAAK6B,SAAS,CAAChE,QAAS,0CAGf2D,GACTxB,KAAK6B,SAAS,CAAEhE,QAAU2D,EAAEM,OAAOV,yCAInC,OACIR,EAAA,qBAAKC,UAAU,iBACXD,EAAA,sBAAMC,UAAU,eAAeC,SAAUd,KAAKS,cAC1CG,EAAA,uBAAO1C,GAAG,UAAU8C,KAAK,OAAOH,UAAU,eAAeQ,SAAUrB,KAAKM,aAAcgB,YAAY,oCAAoCF,MAAOpB,KAAKI,MAAMvC,UACxJ+C,EAAA,wBAAQW,SAAUvB,KAAKI,MAAMvC,QAAQE,OAAS,EAAG8C,UAAU,OAAOG,KAAK,UAAvE,iBA5BwBkB,qBCMvB0B,cAEjB,SAAAA,EAAYhE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4D,IACf/D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8D,GAAAzD,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTtB,MAAO,GACP0D,MAAO,GACPM,OAAQ,MAGZjD,EAAKmD,UAAYnD,EAAKmD,UAAUzC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAK8D,YAAc9D,EAAK8D,YAAYpD,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKgE,QAAUhE,EAAKgE,QAAQtD,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACfA,EAAKiE,aAAejE,EAAKiE,aAAavD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKkE,mBAAqBlE,EAAKkE,mBAAmBxD,KAAxBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAE1BA,EAAKD,MAAM8B,OAAOsC,GAAGC,IAAM5E,eAAgBQ,EAAKiE,cAChDjE,EAAKD,MAAM8B,OAAOsC,GAAGC,IAAMzE,kBAAmBK,EAAKiE,cAhBpCjE,4EAmBNf,GAAO,IAAA6B,EAAAX,KAChBA,KAAK6B,SAAS,CAAC/C,MAAOA,EAAMoF,OAAO,SAAAnC,GAAI,OAAIA,EAAK7C,UAAYyB,EAAKf,MAAMmC,KAAK7C,yDAI5Ec,KAAKJ,MAAM8B,OAAOC,KAAKsC,IAAM7E,YAAaY,KAAK6D,SAC/C7D,KAAKJ,MAAM8B,OAAOsC,GAAGC,IAAMvE,gBAAiBM,KAAK6D,8CAGxCM,EAAQC,GAEjB,OADeD,EAAOE,MAAM,SAAAC,GAAC,OAAIF,EAAOG,SAASD,MAAOF,EAAOC,MAAM,SAAAC,GAAC,OAAIH,EAAOI,SAASD,gDAI3EpF,GAAU,IAAAsF,EAAAxE,KACnByE,EAAY,CAACvF,EAAUc,KAAKJ,MAAMmC,KAAK7C,UACvCwF,EAAS1E,KAAKI,MAAMoC,MAAMI,KAAK,SAAA+B,GAAE,OAAIH,EAAKI,aAAaD,EAAG7F,MAAO2F,KACjEC,EACF1E,KAAKgD,UAAU0B,GAGf1E,KAAKJ,MAAM8B,OAAOC,KAAKsC,IAAMvE,gBAAiBM,KAAKJ,MAAMmC,KAAK7C,SAAUA,oCAK5E,OACI0B,EAAA,qBAAKC,UAAU,aAEXD,EAAA,cAACiE,EAAD,CAAWtC,eAAgBvC,KAAK+D,mBAAoBjF,MAAOkB,KAAKI,MAAMtB,MAAO4C,OAAQ1B,KAAKJ,MAAM8B,OACrFc,MAAOxC,KAAKI,MAAMoC,MAAOT,KAAM/B,KAAKJ,MAAMmC,KAAMe,OAAQ9C,KAAKI,MAAM0C,OACnEE,UAAWhD,KAAKgD,YAC3BpC,EAAA,qBAAKC,UAAU,uBAEe,OAAtBb,KAAKI,MAAM0C,OACHlC,EAAA,qBAAKC,UAAU,aACXD,EAAA,cAACkE,EAAD,CAAcC,KAAM/E,KAAKI,MAAM0C,OAAO/D,MAAOF,SAAUmB,KAAKI,MAAM0C,OAAOjE,SAC3DkD,KAAM/B,KAAKJ,MAAMmC,OAC/BnB,EAAA,cAACoE,EAAD,CAAgBrB,YAAa3D,KAAK2D,eAG1C/C,EAAA,qBAAKC,UAAU,oBACXD,EAAA,kFAQlBkC,GACN9C,KAAK6B,SAAS,CAACiB,OAAQA,wCAGfjF,GACR,IAAIoH,EAASjF,KAAKI,MAAM0C,OAAO5E,GAC3BgH,EAActH,wBAAcC,EAASmC,KAAKJ,MAAMmC,KAAK7C,UACzDc,KAAKJ,MAAM8B,OAAOC,KAAKsC,IAAM1E,aAAc2F,EAAaD,mCAGpDxC,GAAM,IAAA0C,EAAAnF,KACJoF,EAAQ,GAAArC,OAAAjD,OAAAuF,EAAA,EAAAvF,CAAOE,KAAKI,MAAMoC,OAAlB,CAAyBC,IACvCzC,KAAK6B,SAAS,CAACW,MAAO4C,EAAUtC,OAAQL,IACxC,IAAI6C,EAAYrB,IAAM3E,iBAAmB,IAAMmD,EAAKvE,GACpD8B,KAAKJ,MAAM8B,OAAOsC,GAAGsB,EAAW,SAACzH,GAAD,OAAasH,EAAKjC,gBAAgBrF,EAAS4E,EAAKvE,8CAGpEL,EAASoH,GACrB,IAAIG,EAAWpF,KAAKI,MAAMoC,MAAMJ,IAAI,SAACK,GAIjC,OAHIA,EAAKvE,KAAO+G,GACZxC,EAAK5D,SAAS0G,KAAK1H,GAEhB4E,IAGXzC,KAAK6B,SAAS,CAACW,MAAO4C,WAhGUlD,aCCnBsD,cAEjB,SAAAA,EAAY5F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwF,IACf3F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0F,GAAArF,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTsB,OAAQ7B,EAAK4F,iBACb1D,KAAM,MAGVlC,EAAKoC,YAAcpC,EAAKoC,YAAY1B,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAK6F,eAAiB7F,EAAK6F,eAAenF,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATPA,wEAaGG,KAAKJ,MAAfb,MACR,OACI4G,EAAAC,EAAAC,cAAA,OAAKhF,UAAU,aAENb,KAAKI,MAAM2B,KAGR4D,EAAAC,EAAAC,cAACC,EAAD,CAAYpE,OAAQ1B,KAAKI,MAAMsB,OAAQK,KAAM/B,KAAKI,MAAM2B,OAFxD4D,EAAAC,EAAAC,cAACE,EAAD,CAAWrE,OAAQ1B,KAAKI,MAAMsB,OAAQO,YAAajC,KAAKiC,wDAaxE,OADe+D,0CAQPjE,GACW/B,KAAKI,MAAhBsB,OACDC,KAAKtC,iBAAgB0C,GAC5B/B,KAAK6B,SAAS,CAAEE,KAAMA,6CAOH/B,KAAKI,MAAhBsB,OACDC,KAAKnC,qBACZQ,KAAK6B,SAAS,CAAEE,KAAM,cApDUkE,aCIzBC,mLANX,OACEP,EAAAC,EAAAC,cAACM,EAAD,CAAYpH,MAAM,wBAHNkH,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa0906e7.chunk.js","sourcesContent":["const uuidv4 = require('uuid/v4');\r\n\r\n/**\r\n * Vytvori uzivatele\r\n * @param name\r\n * @returns {{nickname: string}}\r\n */\r\nconst createUser = (nickname, socketId)=>(\r\n    {\r\n        nickname: nickname,\r\n        socketId: socketId\r\n    }\r\n)\r\n\r\n/**\r\n * Vytvori zpravu\r\n * @param message\r\n * @param sender\r\n * @param recipient\r\n * @returns {{sender: string, recipient: string, message: string, datetime: Date}}\r\n */\r\nconst createMessage = (message = \"\", sender = \"\")=>(\r\n    {\r\n        id: uuidv4(),\r\n        sender: sender,\r\n        message: message,\r\n        datetime: new Date(Date.now()).toLocaleString(undefined, {day: 'numeric',\r\n            month: 'numeric',\r\n            year: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit'})\r\n    }\r\n);\r\n\r\n/**\r\n * Vytvori chatovou mistnost\r\n * @param messages\r\n * @param users\r\n * @param title\r\n * @returns {{id: *, title: string, users: Array, messages: Array, typingUsers: Array}}\r\n */\r\nconst createChat = (messages = [], users = [], title = \"Public\")=>(\r\n    {\r\n        id: uuidv4(),\r\n        title: title,\r\n        users: users,\r\n        messages: messages,\r\n        typingUsers: []\r\n    }\r\n);\r\n\r\nmodule.exports = {\r\n    createMessage,\r\n    createChat,\r\n    createUser\r\n}","module.exports = {\r\n    PUBLIC_CHAT:\"PUBLIC_CHAT\",\r\n    USER_CONNECTED:\"USER_CONNECTED\",\r\n    MESSAGE_RECEIVED:\"MESSAGE_RECEIVED\",\r\n    MESSAGE_SENT:\"MESSAGE_SENT\",\r\n    USER_DISCONNECTED:\"USER_DISCONNECTED\",\r\n    VERIFY_USER:\"VERIFY_USER\",\r\n    PRIVATE_MESSAGE:\"PRIVATE_MESSAGE\"\r\n};","import * as React from \"react\";\r\nimport { VERIFY_USER } from \"../Events\";\r\n\r\nexport default class LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nickname: \"\",\r\n            error: \"\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.verifyUserCallback = this.verifyUserCallback.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <form className=\"login-form\" onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"nickname\">\r\n                        <h1>Please enter your nickname: </h1>\r\n                    </label>\r\n                    <input type=\"text\" ref={(input) => this.textInput = input} id=\"nickname\" value={this.state.nickname} onChange={this.handleChange} placeholder=\"Enter your nickname and press ENTER\"/>\r\n                    <button disabled={this.state.nickname.length < 1} className=\"send\" type=\"submit\">Log In</button>\r\n                    <div className=\"error\">{ this.state.error }</div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.state.nickname) {\r\n            this.props.socket.emit(VERIFY_USER, this.state.nickname, this.verifyUserCallback);\r\n        }\r\n        else {\r\n            this.handleError(\"Nickname must not be empty.\");\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ nickname : e.target.value })\r\n    }\r\n\r\n    handleError(error) {\r\n        this.setState({error: error});\r\n    }\r\n\r\n    verifyUserCallback(user, nicknameExists) {\r\n        if (nicknameExists) {\r\n            this.handleError(\"This nickname is already taken.\");\r\n        }\r\n        else {\r\n            this.handleError(null);\r\n            this.props.connectUser(user);\r\n        }\r\n    }\r\n}","import * as React from \"react\";\r\n\r\n\r\nexport default class UsersList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"side-bar\">\r\n                <div className=\"heading\">\r\n                <h2>Active users:</h2>\r\n                </div>\r\n                <div className=\"users\">\r\n                        {\r\n                            this.props.users.map((user) => {\r\n                                return (\r\n                                    <div className=\"user \" key={user.nickname} onClick={() => this.props.privateMessage(user.nickname)}>\r\n                                        # {user.nickname}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                </div>\r\n\r\n                <div className=\"heading\">\r\n                <h2>Chats:</h2>\r\n                </div>\r\n                <div className=\"users\">\r\n                        {\r\n                            this.props.chats.map((chat)=> {\r\n                                if (chat.title) {\r\n                                    const lastMessage = chat.messages[chat.messages.length - 1];\r\n                                    const username = chat.users.find((user) => {return user !== this.props.user.nickname}) || \"Public\";\r\n                                    const classNames = (this.props.active && this.props.active.id === chat.id) ? 'active' : '';\r\n                                    return (\r\n                                        <div key={chat.id} className={`user ${classNames}`} onClick={() => {this.props.setActive(chat)}}>\r\n                                            <div className=\"user-info\">\r\n                                                <div className=\"name\">{username}</div>\r\n                                                {lastMessage && <div className=\"last-message\">{lastMessage.message}</div>}\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport default class MessagesList extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n    }\r\n\r\n    messageReceived() {\r\n        this.refs.container.scrollTop = this.refs.container.scrollHeight;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.messageReceived();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.messageReceived();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"thread-container\" ref='container'>\r\n\r\n                    <div className=\"thread\">\r\n                        {\r\n                            this.props.messages.map((message, index) => this.renderMessage(message))\r\n                        }\r\n                    </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderMessage(message) {\r\n\r\n        const {sender, text, datetime} = message;\r\n\r\n        return (\r\n                    <div key={message.id}\r\n                         className={'message-container ' + (message.sender === this.props.user.nickname && 'right')}>\r\n                        <div className=\"data\">\r\n                            <div className=\"message\">{message.message}</div>\r\n                            <div className=\"time\">{message.sender}</div>\r\n                            <div className=\"time\">{datetime}</div>\r\n                        </div>\r\n\r\n                    </div>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nexport default class NewMessageForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: \"\",\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.sendMessage(this.state.message);\r\n        this.setState({message: ''});\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ message : e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"message-input\">\r\n                <form className=\"message-form\" onSubmit={this.handleSubmit}>\r\n                    <input id=\"message\" type=\"text\" className=\"form-control\" onChange={this.handleChange} placeholder=\"Type your message and press ENTER\" value={this.state.message}/>\r\n                    <button disabled={this.state.message.length < 1} className=\"send\" type=\"submit\">Send</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport Event from \"../Events\";\r\nimport UsersList from \"./UsersList\";\r\nimport MessagesList from \"./MessagesList\";\r\nimport NewMessageForm from \"./NewMessageForm\";\r\nimport { createMessage } from \"../Factories\";\r\n\r\nexport default class ChatLayout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            users: [],\r\n            chats: [],\r\n            active: null\r\n        };\r\n\r\n        this.setActive = this.setActive.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.addChat = this.addChat.bind(this);\r\n        this.usersChanged = this.usersChanged.bind(this);\r\n        this.sendPrivateMessage = this.sendPrivateMessage.bind(this);\r\n\r\n        this.props.socket.on(Event.USER_CONNECTED, this.usersChanged);\r\n        this.props.socket.on(Event.USER_DISCONNECTED, this.usersChanged);\r\n    }\r\n\r\n    usersChanged(users) {\r\n        this.setState({users: users.filter(user => user.nickname != this.props.user.nickname)});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.emit(Event.PUBLIC_CHAT, this.addChat);\r\n        this.props.socket.on(Event.PRIVATE_MESSAGE, this.addChat);\r\n    }\r\n\r\n    sameElements(array1, array2) {\r\n        const result = array1.every(x => array2.includes(x)) && array2.every(x => array1.includes(x));\r\n        return result;\r\n    }\r\n\r\n    sendPrivateMessage(nickname) {\r\n        const toCompare = [nickname, this.props.user.nickname];\r\n        const toOpen = this.state.chats.find(ch => this.sameElements(ch.users, toCompare));\r\n        if (!!toOpen) {\r\n            this.setActive(toOpen);\r\n        }\r\n        else {\r\n            this.props.socket.emit(Event.PRIVATE_MESSAGE, this.props.user.nickname, nickname);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n\r\n                <UsersList privateMessage={this.sendPrivateMessage} users={this.state.users} socket={this.props.socket}\r\n                           chats={this.state.chats} user={this.props.user} active={this.state.active}\r\n                           setActive={this.setActive}/>\r\n                <div className=\"chat-room-container\">\r\n                    {\r\n                        this.state.active !== null ? (\r\n                                <div className=\"chat-room\">\r\n                                    <MessagesList name={this.state.active.title} messages={this.state.active.messages}\r\n                                                  user={this.props.user}/>\r\n                                    <NewMessageForm sendMessage={this.sendMessage}/>\r\n                                </div>\r\n                            ) :\r\n                            <div className=\"chat-room choose\">\r\n                                <h3>Pick a chat room.</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    setActive(active) {\r\n        this.setState({active: active});\r\n    }\r\n\r\n    sendMessage(message) {\r\n        let chatId = this.state.active.id;\r\n        let messageItem = createMessage(message, this.props.user.nickname);\r\n        this.props.socket.emit(Event.MESSAGE_SENT, messageItem, chatId);\r\n    }\r\n\r\n    addChat(chat) {\r\n        const newChats = [...this.state.chats, chat];\r\n        this.setState({chats: newChats, active: chat});\r\n        let eventName = Event.MESSAGE_RECEIVED + \"-\" + chat.id;\r\n        this.props.socket.on(eventName, (message) => this.messageReceived(message, chat.id));\r\n    }\r\n\r\n    messageReceived(message, chatId) {\r\n        let newChats = this.state.chats.map((chat) => {\r\n            if (chat.id === chatId) {\r\n                chat.messages.push(message);\r\n            }\r\n            return chat;\r\n        });\r\n\r\n        this.setState({chats: newChats});\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport { USER_CONNECTED, USER_DISCONNECTED } from \"../Events\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport ChatLayout from \"./ChatLayout\";\r\n\r\n//const socketUrl = window.location.hostname;\r\n\r\nexport default class MainLayout extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            socket: this.initConnection(),\r\n            user: null\r\n        }\r\n\r\n        this.connectUser = this.connectUser.bind(this);\r\n        this.disconnectUser = this.disconnectUser.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const { title } = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                {\r\n                    !this.state.user ?\r\n                        <LoginForm socket={this.state.socket} connectUser={this.connectUser}/>\r\n                        :\r\n                        <ChatLayout socket={this.state.socket} user={this.state.user}/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Pripoji socket klienta\r\n     */\r\n    initConnection() {\r\n        const socket = io();\r\n        return socket;\r\n    }\r\n\r\n    /**\r\n     * Pripoji uzivatele\r\n     * @param user { nickname:string }\r\n     */\r\n    connectUser(user) {\r\n        const { socket } = this.state;\r\n        socket.emit(USER_CONNECTED, user);\r\n        this.setState({ user: user });\r\n    }\r\n\r\n    /**\r\n     * Odpoji uzivatele\r\n     */\r\n    disconnectUser() {\r\n        const { socket } = this.state;\r\n        socket.emit(USER_DISCONNECTED);\r\n        this.setState({ user: null });\r\n    }\r\n}","import React, { Component } from 'react';\nimport './style.css';\nimport MainLayout from \"./components/MainLayout\";\n\nclass App extends Component {\n  render() {\n    return (\n      <MainLayout title=\"PWA Chat App\"/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}